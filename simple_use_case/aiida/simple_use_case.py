from pathlib import Path

from aiida.orm import List, SinglefileData
from aiida.engine.processes.functions import shellfunction, workfunction


@shellfunction(command="gmsh", output_filenames=["mesh"])
def gmsh(**kwargs):
    """Run the ``gmsh`` command."""


@shellfunction(command="meshio", output_filenames=["mesh.xdmf", "mesh.h5"])
def meshio(**kwargs):
    """Run the ``meshio`` command to convert to XDMF format."""


@shellfunction(command="python", output_filenames=["*.pvd", "*.vtu"])
def poisson(**kwargs):
    """Run the ``poisson`` step."""


@shellfunction(command="pvbatch", output_filenames=["plotoverline.csv"])
def pvbatch(**kwargs):
    """Run the ``pvbatch`` command."""


@workfunction
def workflow(geometry, poisson_script, post_processing_script):
    """Simple workflow to solve Poisson equation for a geometry."""

    # Generate the mesh from the geometry.
    # Instead of writing to "mesh.msh" which would allow gmsh to deduce the output format
    # we explicitly specify the format using the "-format" option.
    # For certain reasons, the output link label in AiiDA would be converted to "mesh_msh"
    # if we would have used "mesh.msh".
    # For more information see section "Design choices" > "Output files" in the AiiDA
    # Enhancement Proposal https://github.com/aiidateam/AEP/tree/aep/shell-functions/xxx_shell_functions
    arguments = List(
        ["-2", "-order", "1", "-format", "msh2", "{geometry}", "-o", "mesh"]
    )
    results_gmsh = gmsh(arguments=arguments, geometry=geometry)

    # Convert the mesh to XDMF format
    # The mesh file generated by gmsh is written to a temporary working directory
    # with a temporary filename. Therefore, meshio can't deduce the input format
    # from the filename and we have to specify this explicitly.
    arguments = List(["convert", "--input-format", "gmsh", "{mesh}", "mesh.xdmf"])
    results_meshio = meshio(arguments=arguments, mesh=results_gmsh["mesh"])

    # Solve poisson equation
    # The additional argument '--h5' is necessary to specify the .h5 file as input,
    # such that it is copied to the temporary directory as well.
    arguments = List(
        [
            "{script}",
            "--mesh",
            "{mesh}",
            "--h5",
            "{mesh_data}",
            "--degree",
            "2",
            "--outputfile",
            "poisson.pvd",
        ]
    )
    results_poisson = poisson(
        arguments=arguments,
        script=poisson_script,
        mesh=results_meshio["mesh_xdmf"],
        mesh_data=results_meshio["mesh_h5"],
    )

    # Postprocessing: plot over line
    # With the .pvd and corresponding .vtu file, the same issue as with the .xdmf and .h5 files occurs.
    arguments = List(["{script}", "{pvd}", "plotoverline.csv", "--vtu", "{vtu}"])
    results_pvbatch = pvbatch(
        arguments=arguments,
        script=post_processing_script,
        pvd=results_poisson["poisson_pvd"],
        vtu=results_poisson["poisson000000_vtu"],
    )

    return results_pvbatch


if __name__ == "__main__":
    geometry = SinglefileData(Path("../source/unit_square.geo").resolve())
    poisson_script = SinglefileData(Path("../source/poisson.py").resolve())
    post_processing_script = SinglefileData(
        Path("../source/postprocessing.py").resolve()
    )
    results, node = workflow.run_get_node(
        geometry, poisson_script, post_processing_script
    )
    print(f"Workflow {node} finished.")
    print(f"Results: {results}")
